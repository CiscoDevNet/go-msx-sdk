/*
MSX SDK

MSX SDK client.

API version: 1.0.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
	"fmt"
)

// TemplateStatus the model 'TemplateStatus'
type TemplateStatus string

// List of TemplateStatus
const (
	TEMPLATESTATUS_NEW TemplateStatus = "NEW"
	TEMPLATESTATUS_PENDING TemplateStatus = "PENDING"
	TEMPLATESTATUS_FAILED TemplateStatus = "FAILED"
	TEMPLATESTATUS_SUCCESS TemplateStatus = "SUCCESS"
	TEMPLATESTATUS_DELETE TemplateStatus = "DELETE"
	TEMPLATESTATUS_ERROR TemplateStatus = "ERROR"
)

// All allowed values of TemplateStatus enum
var AllowedTemplateStatusEnumValues = []TemplateStatus{
	"NEW",
	"PENDING",
	"FAILED",
	"SUCCESS",
	"DELETE",
	"ERROR",
}

func (v *TemplateStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TemplateStatus(value)
	for _, existing := range AllowedTemplateStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TemplateStatus", value)
}

// NewTemplateStatusFromValue returns a pointer to a valid TemplateStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTemplateStatusFromValue(v string) (*TemplateStatus, error) {
	ev := TemplateStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TemplateStatus: valid values are %v", v, AllowedTemplateStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TemplateStatus) IsValid() bool {
	for _, existing := range AllowedTemplateStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TemplateStatus value
func (v TemplateStatus) Ptr() *TemplateStatus {
	return &v
}

type NullableTemplateStatus struct {
	value *TemplateStatus
	isSet bool
}

func (v NullableTemplateStatus) Get() *TemplateStatus {
	return v.value
}

func (v *NullableTemplateStatus) Set(val *TemplateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateStatus(val *TemplateStatus) *NullableTemplateStatus {
	return &NullableTemplateStatus{value: val, isSet: true}
}

func (v NullableTemplateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

