/*
 * KAKAPO - MSX SDK
 *
 * MSX Platform SDK
 *
 * API version: 1.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// WorkflowDefAccessMeta struct for WorkflowDefAccessMeta
type WorkflowDefAccessMeta struct {
	IsIntegration *bool `json:"is_integration,omitempty"`
	IsInternal *bool `json:"is_internal,omitempty"`
}

// NewWorkflowDefAccessMeta instantiates a new WorkflowDefAccessMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowDefAccessMeta() *WorkflowDefAccessMeta {
	this := WorkflowDefAccessMeta{}
	return &this
}

// NewWorkflowDefAccessMetaWithDefaults instantiates a new WorkflowDefAccessMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowDefAccessMetaWithDefaults() *WorkflowDefAccessMeta {
	this := WorkflowDefAccessMeta{}
	return &this
}

// GetIsIntegration returns the IsIntegration field value if set, zero value otherwise.
func (o *WorkflowDefAccessMeta) GetIsIntegration() bool {
	if o == nil || o.IsIntegration == nil {
		var ret bool
		return ret
	}
	return *o.IsIntegration
}

// GetIsIntegrationOk returns a tuple with the IsIntegration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowDefAccessMeta) GetIsIntegrationOk() (*bool, bool) {
	if o == nil || o.IsIntegration == nil {
		return nil, false
	}
	return o.IsIntegration, true
}

// HasIsIntegration returns a boolean if a field has been set.
func (o *WorkflowDefAccessMeta) HasIsIntegration() bool {
	if o != nil && o.IsIntegration != nil {
		return true
	}

	return false
}

// SetIsIntegration gets a reference to the given bool and assigns it to the IsIntegration field.
func (o *WorkflowDefAccessMeta) SetIsIntegration(v bool) {
	o.IsIntegration = &v
}

// GetIsInternal returns the IsInternal field value if set, zero value otherwise.
func (o *WorkflowDefAccessMeta) GetIsInternal() bool {
	if o == nil || o.IsInternal == nil {
		var ret bool
		return ret
	}
	return *o.IsInternal
}

// GetIsInternalOk returns a tuple with the IsInternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowDefAccessMeta) GetIsInternalOk() (*bool, bool) {
	if o == nil || o.IsInternal == nil {
		return nil, false
	}
	return o.IsInternal, true
}

// HasIsInternal returns a boolean if a field has been set.
func (o *WorkflowDefAccessMeta) HasIsInternal() bool {
	if o != nil && o.IsInternal != nil {
		return true
	}

	return false
}

// SetIsInternal gets a reference to the given bool and assigns it to the IsInternal field.
func (o *WorkflowDefAccessMeta) SetIsInternal(v bool) {
	o.IsInternal = &v
}

func (o WorkflowDefAccessMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsIntegration != nil {
		toSerialize["is_integration"] = o.IsIntegration
	}
	if o.IsInternal != nil {
		toSerialize["is_internal"] = o.IsInternal
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowDefAccessMeta struct {
	value *WorkflowDefAccessMeta
	isSet bool
}

func (v NullableWorkflowDefAccessMeta) Get() *WorkflowDefAccessMeta {
	return v.value
}

func (v *NullableWorkflowDefAccessMeta) Set(val *WorkflowDefAccessMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowDefAccessMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowDefAccessMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowDefAccessMeta(val *WorkflowDefAccessMeta) *NullableWorkflowDefAccessMeta {
	return &NullableWorkflowDefAccessMeta{value: val, isSet: true}
}

func (v NullableWorkflowDefAccessMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowDefAccessMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


