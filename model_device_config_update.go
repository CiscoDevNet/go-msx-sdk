/*
MSX SDK

MSX SDK client.

API version: 1.0.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// DeviceConfigUpdate struct for DeviceConfigUpdate
type DeviceConfigUpdate struct {
	CorrelationId string `json:"correlationId"`
	ConfigContent *string `json:"configContent,omitempty"`
	Format string `json:"format"`
	AdditionalProperties map[string]interface{}
}

type _DeviceConfigUpdate DeviceConfigUpdate

// NewDeviceConfigUpdate instantiates a new DeviceConfigUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceConfigUpdate(correlationId string, format string) *DeviceConfigUpdate {
	this := DeviceConfigUpdate{}
	this.CorrelationId = correlationId
	this.Format = format
	return &this
}

// NewDeviceConfigUpdateWithDefaults instantiates a new DeviceConfigUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceConfigUpdateWithDefaults() *DeviceConfigUpdate {
	this := DeviceConfigUpdate{}
	return &this
}

// GetCorrelationId returns the CorrelationId field value
func (o *DeviceConfigUpdate) GetCorrelationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value
// and a boolean to check if the value has been set.
func (o *DeviceConfigUpdate) GetCorrelationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CorrelationId, true
}

// SetCorrelationId sets field value
func (o *DeviceConfigUpdate) SetCorrelationId(v string) {
	o.CorrelationId = v
}

// GetConfigContent returns the ConfigContent field value if set, zero value otherwise.
func (o *DeviceConfigUpdate) GetConfigContent() string {
	if o == nil || o.ConfigContent == nil {
		var ret string
		return ret
	}
	return *o.ConfigContent
}

// GetConfigContentOk returns a tuple with the ConfigContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigUpdate) GetConfigContentOk() (*string, bool) {
	if o == nil || o.ConfigContent == nil {
		return nil, false
	}
	return o.ConfigContent, true
}

// HasConfigContent returns a boolean if a field has been set.
func (o *DeviceConfigUpdate) HasConfigContent() bool {
	if o != nil && o.ConfigContent != nil {
		return true
	}

	return false
}

// SetConfigContent gets a reference to the given string and assigns it to the ConfigContent field.
func (o *DeviceConfigUpdate) SetConfigContent(v string) {
	o.ConfigContent = &v
}

// GetFormat returns the Format field value
func (o *DeviceConfigUpdate) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *DeviceConfigUpdate) GetFormatOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *DeviceConfigUpdate) SetFormat(v string) {
	o.Format = v
}

func (o DeviceConfigUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["correlationId"] = o.CorrelationId
	}
	if o.ConfigContent != nil {
		toSerialize["configContent"] = o.ConfigContent
	}
	if true {
		toSerialize["format"] = o.Format
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeviceConfigUpdate) UnmarshalJSON(bytes []byte) (err error) {
	varDeviceConfigUpdate := _DeviceConfigUpdate{}

	if err = json.Unmarshal(bytes, &varDeviceConfigUpdate); err == nil {
		*o = DeviceConfigUpdate(varDeviceConfigUpdate)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "correlationId")
		delete(additionalProperties, "configContent")
		delete(additionalProperties, "format")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceConfigUpdate struct {
	value *DeviceConfigUpdate
	isSet bool
}

func (v NullableDeviceConfigUpdate) Get() *DeviceConfigUpdate {
	return v.value
}

func (v *NullableDeviceConfigUpdate) Set(val *DeviceConfigUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceConfigUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceConfigUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceConfigUpdate(val *DeviceConfigUpdate) *NullableDeviceConfigUpdate {
	return &NullableDeviceConfigUpdate{value: val, isSet: true}
}

func (v NullableDeviceConfigUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceConfigUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


