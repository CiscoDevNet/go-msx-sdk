/*
 * KAKAPO - MSX SDK
 *
 * MSX Platform SDK
 *
 * API version: 1.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// Offer struct for Offer
type Offer struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Label string `json:"label"`
	Description string `json:"description"`
	ProductId string `json:"productId"`
	Version int32 `json:"version"`
	DisplayOrder int32 `json:"displayOrder"`
	Image string `json:"image"`
	Price *string `json:"price,omitempty"`
	Type *string `json:"type,omitempty"`
	SupportedProperties []string `json:"supportedProperties"`
	SupportedOptions []NameValue `json:"supportedOptions"`
	Approvals map[string]map[string]interface{} `json:"approvals,omitempty"`
}

// NewOffer instantiates a new Offer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffer(name string, label string, description string, productId string, version int32, displayOrder int32, image string, supportedProperties []string, supportedOptions []NameValue) *Offer {
	this := Offer{}
	this.Name = name
	this.Label = label
	this.Description = description
	this.ProductId = productId
	this.Version = version
	this.DisplayOrder = displayOrder
	this.Image = image
	this.SupportedProperties = supportedProperties
	this.SupportedOptions = supportedOptions
	return &this
}

// NewOfferWithDefaults instantiates a new Offer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferWithDefaults() *Offer {
	this := Offer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Offer) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Offer) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Offer) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Offer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Offer) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Offer) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value
func (o *Offer) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Offer) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Offer) SetLabel(v string) {
	o.Label = v
}

// GetDescription returns the Description field value
func (o *Offer) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Offer) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Offer) SetDescription(v string) {
	o.Description = v
}

// GetProductId returns the ProductId field value
func (o *Offer) GetProductId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *Offer) GetProductIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *Offer) SetProductId(v string) {
	o.ProductId = v
}

// GetVersion returns the Version field value
func (o *Offer) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Offer) GetVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Offer) SetVersion(v int32) {
	o.Version = v
}

// GetDisplayOrder returns the DisplayOrder field value
func (o *Offer) GetDisplayOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value
// and a boolean to check if the value has been set.
func (o *Offer) GetDisplayOrderOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DisplayOrder, true
}

// SetDisplayOrder sets field value
func (o *Offer) SetDisplayOrder(v int32) {
	o.DisplayOrder = v
}

// GetImage returns the Image field value
func (o *Offer) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *Offer) GetImageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *Offer) SetImage(v string) {
	o.Image = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Offer) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetPriceOk() (*string, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Offer) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *Offer) SetPrice(v string) {
	o.Price = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Offer) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Offer) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Offer) SetType(v string) {
	o.Type = &v
}

// GetSupportedProperties returns the SupportedProperties field value
func (o *Offer) GetSupportedProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SupportedProperties
}

// GetSupportedPropertiesOk returns a tuple with the SupportedProperties field value
// and a boolean to check if the value has been set.
func (o *Offer) GetSupportedPropertiesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupportedProperties, true
}

// SetSupportedProperties sets field value
func (o *Offer) SetSupportedProperties(v []string) {
	o.SupportedProperties = v
}

// GetSupportedOptions returns the SupportedOptions field value
func (o *Offer) GetSupportedOptions() []NameValue {
	if o == nil {
		var ret []NameValue
		return ret
	}

	return o.SupportedOptions
}

// GetSupportedOptionsOk returns a tuple with the SupportedOptions field value
// and a boolean to check if the value has been set.
func (o *Offer) GetSupportedOptionsOk() (*[]NameValue, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupportedOptions, true
}

// SetSupportedOptions sets field value
func (o *Offer) SetSupportedOptions(v []NameValue) {
	o.SupportedOptions = v
}

// GetApprovals returns the Approvals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Offer) GetApprovals() map[string]map[string]interface{} {
	if o == nil  {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Approvals
}

// GetApprovalsOk returns a tuple with the Approvals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Offer) GetApprovalsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Approvals == nil {
		return nil, false
	}
	return &o.Approvals, true
}

// HasApprovals returns a boolean if a field has been set.
func (o *Offer) HasApprovals() bool {
	if o != nil && o.Approvals != nil {
		return true
	}

	return false
}

// SetApprovals gets a reference to the given map[string]map[string]interface{} and assigns it to the Approvals field.
func (o *Offer) SetApprovals(v map[string]map[string]interface{}) {
	o.Approvals = v
}

func (o Offer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["productId"] = o.ProductId
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if true {
		toSerialize["image"] = o.Image
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["supportedProperties"] = o.SupportedProperties
	}
	if true {
		toSerialize["supportedOptions"] = o.SupportedOptions
	}
	if o.Approvals != nil {
		toSerialize["approvals"] = o.Approvals
	}
	return json.Marshal(toSerialize)
}

type NullableOffer struct {
	value *Offer
	isSet bool
}

func (v NullableOffer) Get() *Offer {
	return v.value
}

func (v *NullableOffer) Set(val *Offer) {
	v.value = val
	v.isSet = true
}

func (v NullableOffer) IsSet() bool {
	return v.isSet
}

func (v *NullableOffer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffer(val *Offer) *NullableOffer {
	return &NullableOffer{value: val, isSet: true}
}

func (v NullableOffer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


