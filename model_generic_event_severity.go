/*
MSX SDK

MSX SDK client.

API version: 1.0.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
	"fmt"
)

// GenericEventSeverity the model 'GenericEventSeverity'
type GenericEventSeverity string

// List of GenericEventSeverity
const (
	GENERICEVENTSEVERITY_CRITICAL GenericEventSeverity = "CRITICAL"
	GENERICEVENTSEVERITY_POOR GenericEventSeverity = "POOR"
	GENERICEVENTSEVERITY_FAIR GenericEventSeverity = "FAIR"
	GENERICEVENTSEVERITY_GOOD GenericEventSeverity = "GOOD"
	GENERICEVENTSEVERITY_UNKNOWN GenericEventSeverity = "UNKNOWN"
)

// All allowed values of GenericEventSeverity enum
var AllowedGenericEventSeverityEnumValues = []GenericEventSeverity{
	"CRITICAL",
	"POOR",
	"FAIR",
	"GOOD",
	"UNKNOWN",
}

func (v *GenericEventSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GenericEventSeverity(value)
	for _, existing := range AllowedGenericEventSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GenericEventSeverity", value)
}

// NewGenericEventSeverityFromValue returns a pointer to a valid GenericEventSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenericEventSeverityFromValue(v string) (*GenericEventSeverity, error) {
	ev := GenericEventSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GenericEventSeverity: valid values are %v", v, AllowedGenericEventSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GenericEventSeverity) IsValid() bool {
	for _, existing := range AllowedGenericEventSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GenericEventSeverity value
func (v GenericEventSeverity) Ptr() *GenericEventSeverity {
	return &v
}

type NullableGenericEventSeverity struct {
	value *GenericEventSeverity
	isSet bool
}

func (v NullableGenericEventSeverity) Get() *GenericEventSeverity {
	return v.value
}

func (v *NullableGenericEventSeverity) Set(val *GenericEventSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericEventSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericEventSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericEventSeverity(val *GenericEventSeverity) *NullableGenericEventSeverity {
	return &NullableGenericEventSeverity{value: val, isSet: true}
}

func (v NullableGenericEventSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericEventSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

