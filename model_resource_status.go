/*
MSX SDK

MSX SDK client.

API version: 1.0.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
	"fmt"
)

// ResourceStatus the model 'ResourceStatus'
type ResourceStatus string

// List of ResourceStatus
const (
	RESOURCESTATUS_UP ResourceStatus = "up"
	RESOURCESTATUS_DOWN ResourceStatus = "down"
	RESOURCESTATUS_UNKNOWN ResourceStatus = "unknown"
)

// All allowed values of ResourceStatus enum
var AllowedResourceStatusEnumValues = []ResourceStatus{
	"up",
	"down",
	"unknown",
}

func (v *ResourceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceStatus(value)
	for _, existing := range AllowedResourceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceStatus", value)
}

// NewResourceStatusFromValue returns a pointer to a valid ResourceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceStatusFromValue(v string) (*ResourceStatus, error) {
	ev := ResourceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceStatus: valid values are %v", v, AllowedResourceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceStatus) IsValid() bool {
	for _, existing := range AllowedResourceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceStatus value
func (v ResourceStatus) Ptr() *ResourceStatus {
	return &v
}

type NullableResourceStatus struct {
	value *ResourceStatus
	isSet bool
}

func (v NullableResourceStatus) Get() *ResourceStatus {
	return v.value
}

func (v *NullableResourceStatus) Set(val *ResourceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceStatus(val *ResourceStatus) *NullableResourceStatus {
	return &NullableResourceStatus{value: val, isSet: true}
}

func (v NullableResourceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

